$(window).load(init);

function init() {
    switch (sv.pageID) {
        case "admin.signin":
            login.initialize("su");
            break;

        case "admin.dashboard":
            dashboard.initialize();
            break;

        case "category.add":
            category_add.initialize();
            break;
    }

    logout.set();
}

var utils = {
    //requires sha256.min.js
    sha256: function (value) {
        return CryptoJS.SHA256(value).toString(CryptoJS.enc.Hex);
    },

    //Fill a HTML <select></select> with list of values in JavaScript array
    fillDropDown: function ($el, data, name, value) {
        for (var i = 0; i < data.length; i++) {
            $('<option/>').text(data[i][name]).attr('value', data[i][value]).appendTo($($el));
        }
    },

    //Fill a HTML <select></select> with list of values in JavaScript data object
    fillDropDown2: function ($el, data, nameKey, valueKey) {
        $.each(data, function (key, value) {
            if (valueKey) key = value[valueKey];
            $('<option/>').text(value[nameKey]).attr('value', key).appendTo($($el));
        });
    },

    //Method to create a HTML DOM element
    createElement: function (element, parent, attributes) {
        /**
        * @params
        *
        * element
        * Type: Selector
        * e.g. "<div/>"
        * String name of element which is required to be created
        *
        * parent
        * Type: String | Element
        * e.g. "#foo", $("#foo"), document.getElementById('foo')
        * Parent element of the newly created element
        *
        * attributes
        * Type: Object
        * e.g. {'className': 'bar', html: "Lorem Ipsum", id: "foo"}
        * Object of attributes to be applied to this element
        */

        if (!attributes) attributes = {};

        //create specified element
        var $el = $(element, attributes);

        //append this element to parent, if available
        if (parent) $el.appendTo($(parent));

        //return the newly created element
        return $el;
    },

    //Method to create JavaScript object of all fields in a <form></form>
    formToObject: function (form) {
        /*
        * Fix #3: Updated method to use jQuery rather that raw HTML
        */
        var $form = $(form),
            json = {};

        //Get Inputs
        $('input', $form).each(function (index, el) {
            var $el = $(el);

            //stay away, if element is disabled
            if ($el.is(":disabled")) return;

            name = $el.attr("name");
            switch ($el.attr("type")) {
                case 'checkbox':
                    //For checkboxes, we need to send values 0/1 rather than 'on', which is natively provided by HTML
                    $el.prop("checked") ? json[name] = "1" : json[name] = "0";
                    break;

                case 'radio':
                    if ($el.prop("checked")) json[name] = $el.val();
                    break;

                default:
                    json[name] = $el.val();
                    break;
            }
        });

        //Get Selects and textareas
        $('select,textarea', $form).each(function (index, el) {
            var $el = $(el);

            //stay away, if element is disabled
            if ($el.is(":disabled")) return;

            json[$el.attr("name")] = $el.val();
        });

        return json;
    },

    //Method for removal for multiple keys(in array) from a JavaScript Object
    dropKeysFromObject: function (obj, dropFields) {
        for (var i = 0; i < dropFields.length; i++) {
            if (obj[dropFields[i]]) delete obj[dropFields[i]];
        }

        return obj;
    },

    //convert JSON string to JavaScript object
    JSONtoObject: function (json) {
        if (JSON) return JSON.parse(json);
        else return eval('(' + json + ')');
    },

    //get cookie from browser, for key provided
    getCookieValue: function (key) {
        return decodeURIComponent(document.cookie.replace(new RegExp("(?:(?:^|.*;)\\s*" + encodeURIComponent(key).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=\\s*([^;]*).*$)|^.*$"), "$1")) || null;
    },

    //convert a data array to object mapper
    createMapFromArray: function (dataArray, key) {
        var mapper = {};
        for (var i = 0, l = dataArray.length; i < l; i++) {
            mapper[dataArray[i][key]] = dataArray[i];
        }

        return mapper;
    },

    //get number of keys in object
    getObjectLength: function (a) {
        return $.map(a, function (n, i) { return i; }).length;
    },

    //compare first string with second, upto n number of characters
    strncmp: function (a, b, n) {
        return a.substring(0, n) == b.substring(0, n);
    }
};

var login = {
    initialize: function (type) {
        var self = this;

        if (type == "su") {
            this.REDIRECT_URL = "/sugandh-vatika/admin/dashboard.php";
        }

        //check if something is found in cookies
        this.checkForCookies();

        //focus username/password at start
        if ($("#username").val() == "") $("#username").focus();
        else $("#password").focus();

        $("#signInForm").validate({
            highlight: function (element, errorClass, validClass) {
                $(element).parent().addClass("has-error");
            },
            unhighlight: function (element, errorClass, validClass) {
                $(element).parent().removeClass("has-error");
            },
            submitHandler: function (form) {
                //call method to submit this form
                self.signIn(self.REDIRECT_URL);

                return false;
            }
        });
    },

    signIn: function (REDIRECT_URL) {
        var jsdata = utils.formToObject("#signInForm");

        //convert actual password to hash
        jsdata.password = utils.sha256(jsdata.password);

        $.ajax({
            type: "POST",
            async: true,
            url: "/sugandh-vatika/php/iface.php?fx=sign&op=in",
            data: jsdata,
            success: function (result) {
                if (utils.strncmp(result, "SUCCESS", 7)) {
                    window.location = REDIRECT_URL;
                } else {
                    alert("Error " + result);
                }
            }
        });
    },

    REDIRECT_URL: "/sugandh-vatika/admin/dashboard.php",

    checkForCookies: function () {
        var cookies = {
            "username": utils.getCookieValue("username"),
            "remember": utils.getCookieValue("remember")
        }

        $.each(cookies, function (key, value) {
            if (key === "remember" && value == 1) {
                $("#" + key).prop("checked", true);
            } else {
                $("#" + key).val(value);
            }
        });
    },
};

var dashboard = {
    initialize: function () {
        this.getModules(this.displayModules);
    },

    displayModules: function () {
        var modulesContainer = document.getElementById("modulesContainer");
        $.each(this.modules, function (key, value) {
            modulesContainer.innerHTML += '<div id="job-thumb" style="opacity: 1">\
             <div id="job-image">\
             <a href="' + value.href + '" class="">\
             <img width="600" height="600" src="' + value.image + '" class="lazy" style="visibility: visible; opacity: 1;">\
             <noscript><img src="' + value.image + '" width="600" height="600"></noscript></a></div>\
             <div id="job-heading"><h2 class="thumb-heading"><a href="' + value.href + '">' + value.name + '<br />\
             <p class="f12" style="margin-top: 8px;">' + value.description + '</p>\
             </a></h2></div></div>';
        });
    },

    getModules: function (callback) {
        var self = this;

        $.ajax({
            type: "GET",
            async: true,
            url: "/sugandh-vatika/php/iface.php?fx=misc&op=getModules",
            success: function (data) {
                if (utils.strncmp(data, "ERROR", 5)) {
                    alert("No modules allowed");
                } else {
                    self.modules = utils.JSONtoObject(data);
                    callback.apply(self);
                }
            }
        });
    },

    modules: {}
};

var category_add = {
    initialize: function () {
        var self = this;

        //focus category name field at start
        $("#name").focus();

        //initialize cute crumbs for list of categories
        this.cuteCrumbs = new Cute_Crumbs({
            defaultText: "#categoryDefaultText",
            crumbsContainer: "#categoryCrumbsContainer",
            removeCallback: this.removeCategory,
            removeConfirmation: function () {
                if (confirm("Removing this category will remove all items associated with this category. Are you sure you want to proceed?"))
                    return true;

                return false;
            }
        });

        //add form submit listener with validation
        $("#addCategoryForm").validate({
            highlight: function (element, errorClass, validClass) {
                $(element).parent().addClass("has-error");
            },
            unhighlight: function (element, errorClass, validClass) {
                $(element).parent().removeClass("has-error");
            },
            submitHandler: function (form) {
                //call method to submit this form
                self.formSubmitCallback();

                return false;
            }
        });

        //get list of categories
        this.fetchCategories(this.listCategories);
    },

    //fetch list of categories
    fetchCategories: function (callback) {
        var self = this;

        $.ajax({
            type: "GET",
            async: true,
            url: "/sugandh-vatika/php/iface.php?fx=category&op=list",
            success: function (data) {
                try {
                    data = utils.JSONtoObject(data);
                } catch (ex) {
                    console.log("list of categories not found");
                    return;
                }

                if (callback) callback.apply(self, [data]);
            }
        });
    },

    listCategories: function (categoriesArray) {
        this.cuteCrumbs.add(categoriesArray);
    },

    removeCategory: function (info) {
        $.ajax({
            type: "GET",
            async: true,
            url: "/sugandh-vatika/php/iface.php?fx=category&op=remove&cid=" + info.id,
            success: function (result) {
                //removed
            }
        });
    },

    successMessageTimeout: null,

    categoryAdded: function () {
        //show category added, success message
        $("#successMessage-1").show();

        //hide message after 8 secs
        if (this.successMessageTimeout) window.clearTimeout(this.successMessageTimeout);
        this.successMessageTimeout = window.setTimeout(function () {
            $("#successMessage-1").hide();
        }, 8000);

        //clear form and focus category name
        $("#addCategoryForm").find("input[type=text], textarea").val("");
        $("#name").focus();
    },

    formSubmitCallback: function () {
        var self = this,
            jsdata = utils.formToObject("#addCategoryForm");

        $.ajax({
            type: "POST",
            async: true,
            url: "/sugandh-vatika/php/iface.php?fx=category&op=add",
            data: jsdata,
            success: function (result) {
                if (utils.strncmp(result, "SUCCESS", 7)) {
                    self.categoryAdded();
                    self.listCategories([jsdata]);
                } else {
                    alert("Unable to add category");
                }
            }
        });
    }
};

var logout = {
    set: function () {
        $(".logout").on('click', this._do);
    },

    _do: function () {
        $.ajax({
            type: "GET",
            async: true,
            url: "/sugandh-vatika/php/iface.php?fx=sign&op=out",
            success: function (result) {
                if (result == "SUCCESS") {
                    window.location = "/sugandh-vatika/admin/login.html";
                }
            }
        });
    }
};